{
    "homepage": "https://www.libsdl.org/projects/SDL_ttf/",
    "description": "ttf library for Simple DirectMedia Layer with FreeType 2 support",
    "version": "2.0.15",
    "license": "Zlib",
    "depends": "sdl2",
    "hash": [
	"aab0d81f1aa6fe654be412efc85829f2b188165dca6c90eb4b12b673f93e054b",
	"cdb72b5b1c3b27795fa128af36f369fee5d3e38a96c350855da0b81880555dbc"
    ],
    "url": [
        "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-$version-VC.zip",
        "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-$version.zip"
    ],
    "installer": {
        "script": [
            "# organize files",
            "mkdir -f \"$dir\\lib\\pkgconfig\" > $null",
            "mkdir -f \"$dir\\include\\SDL2\" > $null",
            "# make arch consistent with scoop naming",
            "mv \"$dir\\SDL2_ttf-$version\\lib\\x86\" \"$dir\\SDL2_ttf-$version\\lib\\32bit\"",
            "mv \"$dir\\SDL2_ttf-$version\\lib\\x64\" \"$dir\\SDL2_ttf-$version\\lib\\64bit\"",
            "# only install the requested architecture",
            "mv \"$dir\\SDL2_ttf-$version\\lib\\$architecture\\*\" \"$dir\\lib\"",
            "",
            "$srcdir = \"$dir\\SDL2_ttf-$version\\\"",
            "mv \"$srcdir\\include\\*.h\"  \"$dir\\include\\SDL2\"",
            "rm \"$dir\\include\\*.h.*\"",
            "$pcin = \"$srcdir\\SDL2_ttf.pc.in\"",
            "$pcout = \"$dir\\lib\\pkgconfig\\SDL2_ttf.pc\"",
            "sc $pcout ((gc $pcin) `",
            "    -replace \"@prefix@\",\"\" `",
            "    -replace \"@exec_prefix@\",\"`${prefix}\" `",
            "    -replace \"@libdir@\",\"`${exec_prefix}/lib\" `",
            "    -replace \"@includedir@\",\"`${prefix}/include\" `",
            "    -replace \"@VERSION@\",\"$version\" `",
            "    -replace \"@SDL_VERSION@\",\"2.0.8\" `",
           ")",
            "",
            "rm -r \"$srcdir\"",
            "",
            "$pcdir = \"$(current_dir $dir)\\lib\\pkgconfig\"",
            "$cmdir = \"$(current_dir $dir)\"",
            "# future sessions",
            "$null, $currpath = strip_path (env 'PKG_CONFIG_PATH' $global) $pcdir",
            "env 'PKG_CONFIG_PATH' $global \"$pcdir;$currpath\"",
            "$null, $currpath = strip_path (env 'CMAKE_PREFIX_PATH' $global) $cmddir",
            "env 'CMAKE_PREFIX_PATH' $global \"$cmddir;$currpath\"",
            "# this session",
            "$null, $env:PKG_CONFIG_PATH = strip_path $env:PKG_CONFIG_PATH $pcdir",
            "$env:PKG_CONFIG_PATH = \"$pcdir;$env:PKG_CONFIG_PATH\"",
            "$null, $env:CMAKE_PREFIX_PATH = strip_path $env:CMAKE_PREFIX_PATH $cmdir",
            "$env:CMAKE_PREFIX_PATH = \"$cmdir;$env:CMAKE_PREFIX_PATH\""
        ]
    },
    "uninstaller": {
        "script": [
            "$pcdir = \"$(current_dir $dir)\\lib\\pkgconfig\"",
            "$cmdir = \"$(current_dir $dir)\"",
            "# future sessions",
            "$was_in_path, $newpath = strip_path (env 'PKG_CONFIG_PATH' $global) $pcdir",
            "if($was_in_path) {",
            "    write-host \"Removing $(friendly_path $pcdir) from your path.\"",
            "    env 'PKG_CONFIG_PATH' $global $newpath",
            "}",
            "$was_in_path, $newpath = strip_path (env 'CMAKE_PREFIX_PATH' $global) $cmdir",
            "if($was_in_path) {",
            "    write-host \"Removing $(friendly_path $cmdir) from your path.\"",
            "    env 'CMAKE_PREFIX_PATH' $global $newpath",
            "}",
            "# current session",
            "$was_in_path, $newpath = strip_path $env:PKG_CONFIG_PATH $pcdir",
            "if($was_in_path) { $env:PKG_CONFIG_PATH = $newpath }",
            "$was_in_path, $newpath = strip_path $env:CMAKE_PREFIX_PATH $cmdir",
            "if($was_in_path) { $env:CMAKE_PREFIX_PATH = $newpath }"
        ]
    }
}
